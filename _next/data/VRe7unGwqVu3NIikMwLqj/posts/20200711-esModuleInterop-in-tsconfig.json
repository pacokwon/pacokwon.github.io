{"pageProps":{"post":{"id":"20200711-esModuleInterop-in-tsconfig","content":"\nWhy is it that different patterns of imports are shown across typescript examples?\n\n```typescript\nimport * as React from 'react';\nimport React from 'react';\n```\n\nLet us look at how the two examples are compiled to javascript code using `tsc`.\n\nFirst, intialize a project with the following commands:\n\n```bash\nmkdir esminterop-example && cd esminterop-example   # create project directory\nyarn init -y                                        # initialize npm project\nyarn add react                                      # add react package (opt.)\nyarn add -D typescript @types/node @types/react     # add typescript compiler and type definitions (req.)\ntouch star.ts plain.ts\n```\n\nFill in the files `star.ts` and `plain.ts` with the following code:\n\n`star.ts`\n\n```typescript\nimport * as React from 'react';\nconsole.log(React);\n```\n\n`plain.ts`\n\n```typescript\nimport React from 'react';\nconsole.log(React);\n```\n\nFirst, let's compile `star.ts` with `tsc` and see the output.\n\n```bash\nnpx tsc star.ts\n```\n\n`star.js`\n\n```javascript\n'use strict';\nexports.__esModule = true;\nvar React = require('react');\nconsole.log(React);\n```\n\nAll good. Now try to compile `plain.ts`, and an error will occur.\n\n```bash\nnpx tsc plain.ts\n\nplain.ts:1:8 - error TS1259: Module '\"/Users/pacokwon/workspace/esminterop-example/node_modules/@types/react/index\"' can only be default-imported using the 'esModuleInterop' flag\n\n1 import React from 'react';\n         ~~~~~\n\n  node_modules/@types/react/index.d.ts:65:1\n    65 export = React;\n       ~~~~~~~~~~~~~~~\n    This module is declared with using 'export =', and can only be used with a default import when using the 'esModuleInterop' flag.\n\n\nFound 1 error.\n```\n\nThe problem occurs because while `react` does not have a default export, our typescript file is attempting to default import it. One way of solving this issue might be to use the wildcard(asterisk) import above. Another way is to use the `--esModuleInterop` flag. Now let's see how the latter way works, by using that flag in our compiler.\n\n```bash\nnpx tsc --esModuleInterop plain.ts\n```\n\nThere are no errors, which is a good thing. The compiled file looks like this:\n\n```javascript\n'use strict';\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nexports.__esModule = true;\nvar react_1 = __importDefault(require('react'));\nconsole.log(react_1['default']);\n```\n\nOne can find out that a wrapper to the require is added. The wrapper provides additional logic, that allows flexible resolution between es6 modules and commonjs modules. It can also be observed that a \"default\" export or import is, from a commonjs module point of view, the value that corresponds to the key `\"default\"` in the `module.exports` object.\n\nAFAIK, javascript packages are usually shipped with the original source code transpiled into using commonjs modules, so the `esModuleInterop` flag is a flag that I commonly use in my `tsconfig.json`.\n","title":"Understanding the esModuleInterop option in tsconfig.json","tags":["typescript","quicknote","en"],"date":"2020-07-11"}},"__N_SSG":true}